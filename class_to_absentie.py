# -*- coding: utf-8 -*-
"""class to absentie.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kckkj1lJjWr2z-AVfJ-ISOO8AyOPDdNR
"""

!pip install gtts

!pip install SpeechRecognition

import speech_recognition as sr

model=sr.Recognizer()

mp3_file=r'/content/class.mp3'

!pip install pydub

import os
from pydub import AudioSegment
from pydub.playback import play
import speech_recognition as sr


mp3_file = r'/content/class.mp3'

if not os.path.exists(mp3_file):
    print(f"Error: File not found at {mp3_file}")
else:
    print(f"File found: {mp3_file}")
    try:

        audio = AudioSegment.from_file(mp3_file, format="mp3",
                                       parameters=["-probesize", "50M", "-analyzeduration", "50M"])
        print("MP3 loaded successfully.")


        temp_wav_file = "temp.wav"
        audio.export(temp_wav_file, format="wav")
        print(f"Exported to {temp_wav_file}")


        model = sr.Recognizer()
        audio_file = temp_wav_file

        with sr.AudioFile(audio_file) as source:
            audio_data = model.record(source)
            try:
                text = model.recognize_google(audio_data)
                print("Recognized text:")
                print(text)
            except sr.UnknownValueError:
                print("Speech Recognition could not understand audio")
            except sr.RequestError as e:
                print(f"Could not request results from Google Speech Recognition service; {e}")

    except Exception as e:
        print(f"An error occurred while processing the audio file: {e}")
        print("The MP3 file might be corrupted or in an unsupported format.")
        print("Please ensure '/content/class.mp3' is a valid and readable MP3 file.")

!pip install transformers

#Summarizing
from transformers import pipeline

summarize=pipeline('summarization')

text=input('')

res=summarize(text,min_length=50,max_length=150)

res

#Analyzing
analyzer=pipeline('sentiment-analysis')

text_input=input("enter some text")

result=analyzer(text_input)

result

#Translating Language
from IPython import get_ipython
from IPython.display import display
import transformers
from transformers import pipeline

translator=pipeline("translation_en_to_hi",model="Helsinki-NLP/opus-mt-en-hi")

text=input("enter some text")

result=translator(text)

result

#Question-Answering
q_a=pipeline('question-answering')

q_a = pipeline('question-answering')

context = """
**RECURSION**
Recursion is just another way to create a loop but infinite Loops aren't very useful in practice . Recursive functions are not the right choice in every situation but they are very good for tree and graph traversals this is been recursion in 100 seconds
"""

while True:
    question = input("Enter a question: ")

    # Simple check: See if any words from the question are in the context
    question_words = set(question.lower().split())
    context_words = set(context.lower().split())

    if not question_words.intersection(context_words):
        print("Your question is not directly related to the context.")
        break

    res = q_a({
        'question': question,
        'context': context
    })
    print("Answer:", res['answer'])

